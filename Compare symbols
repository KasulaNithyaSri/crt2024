Given a string S(input consisting) of ‘’ and ‘#’. The length of the string is variable. The task is to find the minimum number of ‘’ or ‘#’ to make it a valid string. The string is considered valid if the number of ‘’ and ‘#’ are equal. The ‘’ and ‘#’ can be at any position in the string.

Input Format

Read a string

Constraints

string

Output Format

(>#): positive integer (#>): negative integer (#=*): 0

Sample Input 0

###***
Sample Output 0

0
Sample Input 1

**###*##*###
Sample Output 1

-4

SOURCE CODE:

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    
    char a[50];
    scanf("%[^\n]s",a);
    int count=0,sym=0;
    int temp=0;
    for(int i=0;a[i]!='\0';i++){
        if(a[i]=='#'){
            count++;
        }
        else
            sym++;
    }
    if(count<sym){
        printf("%d",sym);
    }
    else
    if(count>sym){
        printf("-%d",sym);
    }
     else{
         printf("%d",temp);
     }    
    return 0;
}
